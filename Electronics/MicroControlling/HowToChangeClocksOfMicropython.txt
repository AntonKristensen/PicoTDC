If you change the right settings in micropython and build it from scratch, then it will always set the right PLL dividers etc.

In the document "Raspberry Pi Pico-series Python SDK. A MicroPython environment for Raspberry Pi microcontrollers."
There is a section 1.3 that tells how to build micropython from source.

First

git clone https://github.com/micropython/micropython.git --branch master

Then:

You need to change these lines to have the correct values:

#define XOSC_HZ _u(40000000)

#define SYS_CLK_HZ _u(120000000)

#define USB_CLK_HZ _u(48000000)

in the file "platform_defs.h" at micropython/lib/pico-sdk/src/rp2040/hardware_regs/include/hardware

as well as change the file "clocks.h" at micropython/lib/pico-sdk/src/rp2_common/hardware_clocks/include/hardware
These lines:

#if (SYS_CLK_HZ == 120 * MHZ || SYS_CLK_HZ == 150 * MHZ) && (XOSC_HZ == 40 * MHZ) && (PLL_SYS_REFDIV == 1)

#define PLL_SYS_VCO_FREQ_HZ                (1440 * MHZ)

#define PLL_SYS_POSTDIV1                    6
#else
#define PLL_SYS_POSTDIV1                    6

#define PLL_SYS_POSTDIV2                    2

#if (USB_CLK_HZ == 48 * MHZ) && (XOSC_HZ == 40 * MHZ) && (PLL_USB_REFDIV == 1)

#define PLL_USB_VCO_FREQ_HZ                 (1440 * MHZ)

#define PLL_USB_POSTDIV1                    6

#define PLL_USB_POSTDIV2                    5


